group plugins;

typeMap ::= [
  "boolean":"String",
  default:"String"
]

conversionMap ::= [
  "boolean":"convertBooleanToXsltParam",
  default:"convertStringToXsltParam"
]

plugin(spec) ::= <<
package $spec.packageName$;

import javax.xml.transform.Transformer;
import java.io.File;


/**
 * A Maven plugin for generating $spec.type$ output from DocBook documents, using version 
 * $spec.docbookXslVersion$ of the DocBook XSL stylesheets.
 * 
 * @see http://docbook.sourceforge.net/
 * @goal generate-$spec.pluginSuffix$
 * @configurator override
 */
public class $spec.className$ 
  extends $spec.superClassName$ 
{

    /**
     * The location of the stylesheet customization.
     *
     * @parameter
     */
    private String $spec.type$Customization;

    /**
     * The extension of the target file name.
     *
     * @parameter default-value="$spec.targetFileExtension$"
     */
    private String targetFileExtension;
  

    /**
     * The target directory to which all output will be written.
     * 
     * @parameter expression="\${basedir}/target/docbkx/$spec.pluginSuffix$"
     */
    private File targetDirectory;

    /**
     * The directory containing the source DocBook files.
     *
     * @parameter expression="\${basedir}/src/docbkx"
     */
    private File sourceDirectory;
 
    $spec.parameters:variable(); separator="\n\n"$

    protected void configure(Transformer transformer) {
        getLog().debug("Configure the transformer.");
        $spec.parameters:parameterPassing(); separator="\n"$
    }

    public File getSourceDirectory() {
        return sourceDirectory;
    }

    public File getTargetDirectory() {
        return targetDirectory;
    }

	public String getDefaultStylesheetLocation() {
        return "$spec.stylesheetLocation$";
	}
	
	public String getType() {
	    return "$spec.type$";
	}

    public String getStylesheetLocation() {
    	getLog().debug("Customization: " + $spec.type$Customization);
        if ($spec.type$Customization != null) {
            return $spec.type$Customization;
        } else if (getNonDefaultStylesheetLocation() == null) {
            return getDefaultStylesheetLocation();
        } else {
            return getNonDefaultStylesheetLocation();
        }
    }

    public String getTargetFileExtension() {
        return targetFileExtension;
    }
    
}
>>

variable() ::= <<
/**
 * $it.description$
 * (Original XSL attribuut: <code>$it.name$</code>.)
 *
 * @parameter
 */  
private $typeMap.(it.type)$ $it.javaIdentifier$;
>>

parameterPassing() ::= <<
if ($it.javaIdentifier$ != null) {
    transformer.setParameter("$it.name$", 
        $conversionMap.(it.type)$($it.javaIdentifier$));
}                     
>>
